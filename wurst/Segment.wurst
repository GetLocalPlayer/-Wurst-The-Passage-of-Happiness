package Segment
import MapBounds
import ClosureTimers
import ClosureForGroups
import LinkedListModule
import Assets
import Raycast


constant LIGHTNING_TYPE = LIGHTNING_DRAIN
constant UNIT_HIT_FX = Abilities.greenDragonMissile
constant VELOCITY = angle(PI/2)
constant WIDTH = 380.


public class Segment
    use LinkedListModule
    private vec3 p1 
    private vec3 p2
    private lightning ltn
    private CallbackPeriodic tim

    construct(vec2 pos, real width, angle angularVelocity)
        var rotation = angle(0)
        let offset = vec2(width/2, 0)
        p1 = pos.withTerrainZ() + offset
        p2 = pos.withTerrainZ() - offset
        ltn = addLightning(LIGHTNING_TYPE, false, p1, p2)
        tim = doPeriodically(ANIMATION_PERIOD) (CallbackPeriodic cb) ->
            rotation += angularVelocity * ANIMATION_PERIOD
            p1 = pos.withTerrainZ() + offset.rotate(rotation)
            p2 = pos.withTerrainZ() - offset.rotate(rotation)
            ltn.move(false, p1, p2)
            let ray = ray2d(p1.toVec2(), p1.toVec2().normalizedPointerTo(p2.toVec2()))
            forUnitsInRange(pos, width, true) (unit u) ->
                if u.isAlive()
                    let castResult = ray.castToCircle(u.getPos(), u.getCollisionSize()).first
                    if castResult.intersects and castResult.distance <= width
                        flashEffect(UNIT_HIT_FX, u, "origin")
                        u.kill()

    ondestroy
        ltn.destr()
        destroy tim

    function getA() returns vec2
        return p1.toVec2()
    
    function getB() returns vec2
        return p2.toVec2()


init // Replace the barrels with segments
    forDestructablesInRect(playableMapRect) d -> 
        if d.getTypeId() == 'LTbr'
            if GetRandomInt(0, 1) == 0
                new Segment(d.getPos(), WIDTH, VELOCITY)
            else
                new Segment(d.getPos(), WIDTH, VELOCITY * (-1))
            d.remove()
